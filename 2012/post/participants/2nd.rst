=================================
 PyCon JP 2012 参加レポート第2回
=================================

2012年9月15日から17日までの3日間、都立産業技術大学院大学で毎年恒例になりましたPyCon JP 2012 が開催されました。

本記事では3回に渡り、PyCon JP 2012 で行われたセッションについてレポート致します。第2回の今回では、主にWeb 開発系セッションの模様をお伝えします。

*******************************
 ナウでヤングな17歳のVPS構築記
*******************************
現在高校2年生でPyCon JP 2012 最年少の発表者、著者吉田昂平によるセッションです。PyCon JP 2012 には発表者としても参加したので、趣向を変えて発表者として私のセッションについてお伝えします。

####################
 Call for Proposals
####################
PyCon JP 2012 が開催される2ヶ月以上前の6月、Call for Proposalsとして演題募集が行われました。このCall for Proposalsに応募したところ、私のセッションが採択されPyCon JP 2012 で登壇することとなりました。

##########
 事前準備
##########
私のセッションは自宅サーバーを仮想化して仮想マシンを操作するウェブコントロールパネルを制作した、という話なので、セッションの前々日までソフトウェアの開発をしていました。

そして、前日から発表資料作りにとりかかりましたが、日中は学校に行っているために作業する時間がなく、結局放課後にカフェに寄ってそこで発表資料を作りました。それでも発表資料が完成しなかったので、自宅での夜を徹した作業の末ようやく発表資料を作る事ができました。

そんな状態で発表を迎えたため、当然発表の練習をすることなどはできませんでした。

##########
 発表当日
##########
Armin Ronacher 氏のキーノートの後が自分のセッションだったので、キーノート終了後自分のセッションが行われる教室に入り準備をしました。

Twitter で#pyconjp ハッシュタグをウォッチしていたところ、併設イベントのDjango & Pyramid Con JP 2012 では立ち見が出るほどの盛況らしいことに対し、私のセッションでは空席が目立っている状況でした。そのため、慌ててTwitter での宣伝を行いました。

これが功を奏したのか、空席も目立たないようになりました。また、後から冷静に考えてみると、私のセッションが行われた教室のキャパシティが180人だったので、多くの方にお越しいただけたようで幸いです。


.. figure:: /_static/homevps.*
   :width: 640px

   登壇中の筆者
   


############
 発表終了後
############
Twitter では多くの方からお褒めの言葉をいただけた上、複数の方のPyCon JP 参加報告ブログでも取り上げて頂き、同様にお褒めの言葉をいただけ、セッションをやった甲斐がありました。とても嬉しかったです。

########
 まとめ
########
発表資料作りはもっと計画的にやるべきであるという教訓を得ました。

自分が日頃やっていることをアピールする事ができ、様々な人と交流することもできますので、みなさんもぜひ来年は発表者として参加してみてください。

* `セッション録画 <http://www.youtube.com/watch?v=tOWZB9tFgu8>`_
* `発表資料 <https://speakerdeck.com/u/yosida95/p/2012-dot-09-dot-15-pycon-jp-2012-%5Bnaudeyanguna17sui-falsevps-gou-zhu-ji-%5D>`_

******************************************
 Python3でここまで出来るWebプログラミング
******************************************

ビープラウドの小田切篤さんによるセッションです。

#########################
 Python2 とPython3の違い
#########################
Python 3の現在の安定版はPython3.2.3 で、セッションの翌週9月22日にPython 3.3.0 final がリリース予定でした。(しかし9月29日に延期されました。)

Python 3のPython 2 との大きな違いとして、以下の3点が挙げられました。

* 標準ライブラリが整理されたこと

    * 標準ライブラリの統廃合があり、import パスが変わりました

* str型がbytes型に、unicode 型がstr型に変わったこと

    * 互いを直接結合できなくなりました
    * str型とbytes型の違いが明確になり、str型は文字列としてのみ、bytes型は生データとしてのみ扱われるようになりました
    * bytes 型で文字列のフォーマットを使えなくなりました

* 相対import の扱いが変わったこと

    * 相対モジュールのimport で"from ." が必要になりました

これらの変更により、Python 2向けに書かれた既存のライブラリが動かなくなります。筆者自身も、Python 3 対応を謳っているライブラリがbytes型の扱い誤っているために動かない事例に遭遇し、バグ報告をした経験があります。


.. figure:: /_static/python3.*
   :width: 640px
   
   講演者の小田切さん


#######################################
 Web フレームワークのPython3対応の遅れ
#######################################
PythonにはWebフレームワーク(またはWebアプリケーション)とWeb サーバー間のやり取りを定義する規格であるWSGI があります。WSGI 1.0 では、特に文字コードとユニコード関連の仕様に曖昧な点がありました。これがbytes型とstr型の違いが明確になったPython 3にWebフレームワークが対応する障害となっていましたが、Python 3.2 がリリースされた頃に公開されたWSGIのバージョン1.0.1で明確に定義されたことで、WebフレームワークのPython 3対応が進むようになりました。

#########################################
 Webアプリケーションを作るうで必要なもの
#########################################
小田切氏はWebアプリケーションを作る上でとりあえず必要だと思うものと、そのソリューションとして以下を挙げました。

* リクエストオブジェクト

    * => Python 3ではWebOb が使えます

* ルーティング

    * ルーティング単体で用意されたものはなかなかなく、探すのに苦労しました
    * Python 2とPython 3両対応で自分で作りました => WebDispatch

* HTMLテンプレート

    * WSGI 1.0.1 が定義される前からテンプレートエンジンのPython 3対応は進んでいました
    * 知っているテンプレートエンジンの半分以上がPython 3対応していました
    * => Jinja2
    * => Mako
    * => Chameleon
    * => Tempita

* WSGIサーバー

    * static ファイルはどうせNginx でやりますが、開発中にNginx を使うのも萎えます
    * => webob.FileApp, webob.DirectoryApp

########
 まとめ
########
各レイヤーのライブラリがPython 3対応してきていて、それぞれのレイヤーでPython 3対応されたライブラリが全く無いという状況は無いと思います。

しかし、画像処理に関して難があります。PIL は非公式パッチによってPython 3.2 で動くようですが、公式にはPIL やpillow がまだPython 3対応されていません。

ただ、結局はWebフレームワークを利用してWebアプリケーションを実装していく事になると思うので、Django 待ちですね、と言ってセッションを締めくくりました。

* `セッション録画 <http://www.youtube.com/watch?v=SespFNc5l4E>`_


************************************
 ソーシャルゲームとメッセージキュー
************************************
株式会社gumi の幾田 雅仁氏によるセッションです。

########################
 メッセージキューの役割
########################
メッセージキューはポイントからポイントに安全かつ非同期にメッセージを送る役割を果たします。ポイントとは何らかの計算実体で、スレッドだったり、プロセスだったり、ノードだったりします。

.. figure:: /_static/mq.*
   :width: 480px

   講演者の幾田さん


##########################
 メッセージキューの仕組み
##########################
ポイントとポイントの間にメッセージを流す役割をするブローカーがあります。ブローカーは内部にキューを持っていて、ポイントが送ったメッセージはこのキューにためられます。そして、このメッセージが別のポイントに配送されます。

メッセージ送信時、送信側はブローカー内部のキューにメッセージを追加する処理だけをすればよいので、受信側の状態に関係なくメッセージを送ることができます。

送信されるすべてのメッセージが一旦キューに貯められるので、メッセージ送受信を非同期化することができ、また信頼性も向上します。

############################
 メッセージキューの利用場面
############################
実際にソーシャルゲームでメッセージキューを利用しているのか、と言うと課金処理と分割されたDB への並行処理に利用しているそうです。

----------
 課金処理
----------
GREE のプラットフォームでゲームを提供する場合、アプリは課金のリクエストを受け取ってから5秒以内にレスポンスを返さないと、その課金自体が無効になるという制約があるため、レスポンスを返すまでに5秒以上かかってしまうと、ユーザーにアイテムを提供したにもかかわらずその代金が受け取れない状態になってしまうのだそうです。

しかし時間がかかる処理はどうしても発生するため、そこでメッセージキューを利用して変則的なRPC を実現し、ユーザーにリダイレクトレスポンスを返したあとで、バックグラウンドでレスポンスを処理し、その結果をユーザーに返すそうです。

---------------------------
 分割されたDB への並行処理
---------------------------
ユーザー毎にDB を水平分割しているそうですが、トランザクションを用いずに複数のDB に同じクエリを投げたい場合、パッチ処理をしたい場合に、データベース毎にキューを作って、キューの下に複数のワーカーをぶら下げてこれを実現しているそうです。

########
 まとめ
########
筆者自身、メッセージキューのKestrel とNoSQLデータベースのMongoDB を用いた非同期処理システムをPyCon JP 2012 開催の2週間前ほどに実装していたことから個人的にホットな話題で、とても興味深くお話を伺う事ができました。

* `セッション録画 <http://www.youtube.com/watch?v=UTGAbADtcAg>`_

*************************
 Webフレームワークパネル
*************************
Flask 作者でPyCon JP 2012 で初日キーノートを行ったArmin Ronacher 氏、django-ja 設立メンバーのひとりである露木誠氏、Pylonsproject.jp 代表の小田切篤氏、Google App EngineのAdvocateである松尾貴史氏がそれぞれFlask, Django, Pyramid, Google App Engine の利点と欠点について激論を交わしました。

###########################
 Webフレームワーク自己紹介
###########################

まずは、各Webフレームワークの自己紹介が行われました。

-------
 Flask
-------
Flask 開発のきっかけはエイプリルフールのジョークとして作ったフレームワークでした。もともとジョークであったこのフレームワークの後に、まともなフレームワークを開発しようということでFlask を開発しました。Flask は開発者に使い方を強いることなく柔軟に、自由に使えるフレームワークになることを目指して開発しました。

--------
 Django
--------
Django の大きな功績はWeb の開発事情を変えたことだと思います。

Django はフルスタックのアプリケーションで、このフルスタックというのはMVC のレベルにとどまらず、世界各国の郵便番号のバリデーションができるなど、アプリケーションを開発する上で必要な機能が詰め込まれているという意味だそうです。

Instagram やPinterest などで使われるなど数多くの実績を持っていることも特徴です。また、PyCon JP 2012 の参加登録のために使われたconnpass というサービスもDjango を使って実装されているため、PyCon JP 2012 来場者の全員はDjango 製アプリケーションを利用したことになります、ともおっしゃっていました。

---------
 Pyramid
---------
Pyramid はDjango の用に世界各国の郵便番号のバリデーションを持っていませんし、本当にコアになる部分しか持っていませんが、そのコアになる部分のテストカバレッジは100%に保ち続けられている上、ドキュメンテーションのカバレッジも100%に近づける努力がされている質実剛健なフレームワークです。

Django などのようにあっという間にアプリケーションが作れてすごい、という事はありませんが、内部から外側までフレームワークとしてよく作りこまれている上、いたるところに手を入れていけるとても拡張性の高いフレームワークです。

また、Python 3対応は早々に終わらせています。

-------------------
 Google App Engine
-------------------
Google App Engine は言わずと知れたGoogle が提供するPaaSです。

Google App Engine には2つの面があって、それはプラットフォームとしての面、ウェブアプリケーション作成に必要なライブラリが揃っている面です。Google App Engine の利用を勧めたいのはシステム管理にリソースを割きたくない人や団体で、逆にインフラエンジニアのリソースをすでに持っていたり、ものすごく速い性能を求める場合には向かないのだそうです。

.. figure:: /_static/discussion.*
   :width: 640px

   左から
   小田切(Pyramid)・松尾(AppEngine)・Armin Ronacher(Flask)・露木(Django)・Ian Lewis(通訳)・山口(司会)


###########################################################
 フレームワークを開発する/プッシュするようになったきっかけ
###########################################################

次に、それぞれのフレームワークの開発を始めたり、プッシュしだすようになったきっかけが紹介されました。

-------
 Flask
-------
もともとはDjango などを使っていましたが、もっと柔軟性のあるフレームワークが欲しくなりました。自分で開発したテンプレートエンジンのJinja2 とWSGI ライブラリのWerkzeugでウェブアプリケーションを開発していました。

この頃にマイクロフレームワークが流行しだしました。この頃の多くのマイクロフレームワークは、ライブラリに依存することは良くない、という風潮により、すでにライブラリとして実装されているものをフレームワークで再実装しているのが多く見られました。このことは良くない、と思いエイプリルフールに記事を書き、ジョークのフレームワークを公開したところ、多くの人の支持されたため、これがFlask の開発につながりました。

--------
 Django
--------
Rails が2004年に発表されて猛威を振るっていました。この頃のPython にはWebのフレームワークが100個位あり、言い換えればよくわからないものが100個もありました。有名どころはZope, Plone でしたが、これは簡単に触れるものではありませんでした。そんな折、2005年の4月にDjango がオープンソース化されました。Django にはリーズナブルな機能が現実的に用意されていました。簡単に言いかえれば、簡単に触れるのに普通なものが手元にある、このことからDjango 推しになったそうです。

---------
 Pyramid
---------
小田切氏がPython を始めた頃はすでにWebアプリケーションならZope を使う、という流れになっていてZope を使っていましたが、Plone が出てきたあたりから追いきれなくなり脱落したそうです。

TurboGearsが出てきたことから、再びPython でのウェブ開発に戻って来て、WSGI ライブラリなどを追っかけている内に、TurboGearsがPylons 上に移植されました。

Repoze というZope のコンセプトやコンポーネントをWSGI でも使えるようにしようというプロジェクトが出てきたことにより、再びZope をやれると思いましたが、Repozeで使われていたフレームワークがPylons Project に合流した事によって、小田切氏が追っかけていたフレームワークがすべてPylons Project に合流し、必然的にPyramid を推すことになったそうです。

-------------------
 Google App Engine
-------------------
SIer をやっていた頃にGoogle App Engine が公開され、インフラ以下のことを開発者が気にする必要がないことを魅力に感じて、Google App Engine を好きになりずっとウォッチしていました。インフラの重荷を開発者が背負うこと無く、コードに集中して開発できることで開発者の能力を高められることを素晴らしいと思っているそうです。

####################################################
 自分のフレームワークについてこれだけは言いたいこと
####################################################

ディスカッションの最後に自分が推すフレームワークについて、これだけは言っておきたい、ということをみなさんが話しました。

---------
 Pyramid
---------
Pyramid はPython 3に対応しています。

--------
 Django
--------
Django はまだPython 3に対応していません。しかし、クリスマスに公開される予定のDjango 1.5 ではSixを使いイクスペリメンタルなPython 3対応がされます。Six というのは、Python 2とPython 3の違いを吸収して、どちらの環境でも使えるようにする仕組みのことで、2かける3でSix と呼ばれています。

-------
 Flask
-------
現在のところ自分がPython 3を使っているわけでもなく、Python 3でFlask を使いたいといっているユーザー数も少ないので、Python 3に対応する予定はありませんが、多くのユーザーからの要望が寄せられればPython 3への対応が早まります。

-------------------
 Google App Engine
-------------------
Flask と同様で、Python 3を使いたいという要望が多くあればPython 3対応が早まります。

########
 まとめ
########
他にも、互いのフレームワークのイケていない点を指摘し合うなどのとても面白いやり取りが繰り広げられました。しかし、紙面の都合上すべてをお伝えすることができません。セッションの録画がYouTube に公開されていますので、ぜひご覧になることをお勧めします。

* `ディスカッション録画 <http://www.youtube.com/watch?v=0OtwD-GE0n8>`_
